{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","total","setTotal","currPortfolio","setCurrPortfolio","tradesValue","setTradesValue","Container","Col","md","Row","className","Form","Group","Label","Control","onChange","e","target","value","type","placeholder","File","accept","file","files","name","substring","lastIndexOf","fileReader","FileReader","readAsText","onload","result","Papa","parse","data","reduce","res","row","parseFloat","handleUploadCSV","id","Button","variant","onClick","preventDefault","console","log","toFixed","handleCalculate","style","color","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8NAqFeA,MA5Ef,WAAgB,IAAD,EACaC,mBAAS,GADtB,mBACNC,EADM,KACCC,EADD,OAE6BF,mBAAS,GAFtC,mBAENG,EAFM,KAESC,EAFT,OAGyBJ,mBAAS,GAHlC,mBAGNK,EAHM,KAGOC,EAHP,KAoCb,OACE,cAACC,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,CAAKC,GAAI,GAAT,UACE,cAACC,EAAA,EAAD,CAAKD,GAAI,GAAT,SACE,oBAAIE,UAAU,mBAAd,oDAEF,cAACD,EAAA,EAAD,CAAKD,GAAI,GAAT,SACE,eAACG,EAAA,EAAD,WACE,eAACA,EAAA,EAAKC,MAAN,WACE,cAACD,EAAA,EAAKE,MAAN,sCACA,cAACF,EAAA,EAAKG,QAAN,CACEC,SAAU,SAACC,GACTb,EAAiBa,EAAEC,OAAOC,QAE5BC,KAAK,OACLC,YAAY,6BAGhB,uBACA,eAACT,EAAA,EAAKC,MAAN,WACE,cAACD,EAAA,EAAKE,MAAN,6DACA,cAACF,EAAA,EAAKU,KAAN,CAAWC,OAAQ,OAAQP,SAAU,SAACC,GAAD,OA7CzB,SAACA,GACvB,IAAMO,EAAOP,EAAEC,OAAOO,MAAM,GAC5B,GAAID,GAEU,QADAA,EAAKE,KAAKC,UAAUH,EAAKE,KAAKE,YAAY,KAAO,GAC1C,CACjB,IAAMC,EAAa,IAAIC,WACvBD,EAAWE,WAAWP,EAAM,SAC5BK,EAAWG,OAAS,SAACf,GACnB,IACMgB,EADOC,IAAKC,MAAMlB,EAAEC,OAAOe,QAAQG,KACrBC,QAAO,SAACC,EAAKC,GAC/B,MAAe,MAAXA,EAAI,GACCD,EAAME,WAAWD,EAAI,IACR,MAAXA,EAAI,GACND,EAAME,WAAWD,EAAI,IAErBD,IAER,GACHhC,EAAe2B,KA2BiCQ,CAAgBxB,IAAIyB,GAAG,WAErE,uBACA,cAACC,EAAA,EAAD,CAAQC,QAAQ,UAAUxB,KAAK,SAASyB,QAAS,SAAC5B,GAAD,OAvDnC,SAACA,GACvBA,EAAE6B,iBACFC,QAAQC,IAAIR,WAAWrC,IACvB4C,QAAQC,IAAI3C,GACZH,GAAUG,EAAcmC,WAAWrC,IAAgB8C,QAAQ,IAmDKC,CAAgBjC,IAAxE,4BAKJ,eAACP,EAAA,EAAD,CAAKD,GAAI,GAAT,UACE,oBAAIE,UAAU,cAAd,2BACA,oBAAIA,UAAU,cAAcwC,MAAOlD,EAAQ,EAAI,CAAEmD,MAAO,OAAU,CAAEA,MAAO,SAA3E,SACGnD,GAAS,EAAT,YAAkBA,GAAlB,YAAiCA,EAAM0B,UAAU,eCjE/C0B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.48f28c61.chunk.js","sourcesContent":["import \"bootstrap/dist/css/bootstrap.min.css\";\nimport Form from \"react-bootstrap/Form\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport { useState } from \"react\";\nimport Papa from \"papaparse\";\n\nfunction App() {\n  const [total, setTotal] = useState(0);\n  const [currPortfolio, setCurrPortfolio] = useState(0);\n  const [tradesValue, setTradesValue] = useState(0);\n\n  const handleCalculate = (e) => {\n    e.preventDefault();\n    console.log(parseFloat(currPortfolio));\n    console.log(tradesValue);\n    setTotal((tradesValue + parseFloat(currPortfolio)).toFixed(2));\n  };\n\n  const handleUploadCSV = (e) => {\n    const file = e.target.files[0];\n    if (file) {\n      const ext = file.name.substring(file.name.lastIndexOf(\".\") + 1);\n      if (ext === \"csv\") {\n        const fileReader = new FileReader();\n        fileReader.readAsText(file, \"UTF-8\");\n        fileReader.onload = (e) => {\n          const data = Papa.parse(e.target.result).data;\n          const result = data.reduce((res, row) => {\n            if (row[3] === \"S\") {\n              return res + parseFloat(row[8]);\n            } else if (row[3] === \"B\") {\n              return res - parseFloat(row[8]);\n            } else {\n              return res;\n            }\n          }, 0);\n          setTradesValue(result);\n        };\n      }\n    }\n  };\n\n  return (\n    <Container>\n      <Col md={12}>\n        <Row md={12}>\n          <h1 className=\"text-center mt-4\">CommSec Total Profit/Loss Calculator</h1>\n        </Row>\n        <Row md={12}>\n          <Form>\n            <Form.Group>\n              <Form.Label>Current Portfolio Value</Form.Label>\n              <Form.Control\n                onChange={(e) => {\n                  setCurrPortfolio(e.target.value);\n                }}\n                type=\"text\"\n                placeholder=\"Enter Portfolio Value\"\n              />\n            </Form.Group>\n            <br></br>\n            <Form.Group>\n              <Form.Label>Confirmation Details (ConfirmationDetails.csv)</Form.Label>\n              <Form.File accept={\".csv\"} onChange={(e) => handleUploadCSV(e)} id=\"csv\" />\n            </Form.Group>\n            <br></br>\n            <Button variant=\"primary\" type=\"submit\" onClick={(e) => handleCalculate(e)}>\n              Calculate\n            </Button>\n          </Form>\n        </Row>\n        <Row md={12}>\n          <h2 className=\"text-center\">Total Returns</h2>\n          <h3 className=\"text-center\" style={total < 0 ? { color: \"red\" } : { color: \"green\" }}>\n            {total >= 0 ? `+$${total}` : `-$${total.substring(1)}`}\n          </h3>\n        </Row>\n      </Col>\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}